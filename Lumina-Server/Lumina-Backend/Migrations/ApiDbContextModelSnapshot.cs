// <auto-generated />
using System;
using Lumina_Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Lumina_Backend.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    partial class ApiDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Lumina_Backend.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountNumber")
                        .HasColumnType("integer");

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(24)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(24)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Accounts", (string)null);
                });

            modelBuilder.Entity("Lumina_Backend.Models.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("varchar(24)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(24)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Logs", (string)null);
                });

            modelBuilder.Entity("Lumina_Backend.Models.Security", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SecurityAnswer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SecurityQuestion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(24)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Securities", (string)null);
                });

            modelBuilder.Entity("Lumina_Backend.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountNumber")
                        .HasColumnType("integer");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(24)");

                    b.Property<string>("TransactionDescription")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(24)");

                    b.HasKey("Id");

                    b.HasIndex("AccountNumber");

                    b.ToTable("Transactions", (string)null);
                });

            modelBuilder.Entity("Lumina_Backend.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("DNI")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("Date");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("ProfileImage")
                        .HasColumnType("text");

                    b.Property<string>("SessionToken")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(24)");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = -1,
                            DateAdded = new DateTime(2024, 5, 1, 20, 25, 30, 908, DateTimeKind.Utc).AddTicks(8448),
                            DateUpdated = new DateTime(2024, 5, 1, 20, 25, 30, 908, DateTimeKind.Utc).AddTicks(8451),
                            Email = "ajruiz2204@example.com",
                            FullName = "Alejandro Ruíz",
                            Password = "$2a$11$vutuXe.txmwo6pMxRxXbiO847TBA5Gr32niuz4u93p.UyCmBmAmSy",
                            Status = "Unverified",
                            UserName = "ajruiz2204"
                        },
                        new
                        {
                            Id = -2,
                            DateAdded = new DateTime(2024, 5, 1, 20, 25, 31, 42, DateTimeKind.Utc).AddTicks(4607),
                            DateUpdated = new DateTime(2024, 5, 1, 20, 25, 31, 42, DateTimeKind.Utc).AddTicks(4611),
                            Email = "alexanderfrt@example.com",
                            FullName = "Alexander Flores",
                            Password = "$2a$11$acWjE3hiMXsUDdMP6Accfu2frshw8y92zwg9RQrbpC8i/TnJ/l7ry",
                            Status = "Unverified",
                            UserName = "AlexanderFRT"
                        },
                        new
                        {
                            Id = -3,
                            DateAdded = new DateTime(2024, 5, 1, 20, 25, 31, 175, DateTimeKind.Utc).AddTicks(2698),
                            DateUpdated = new DateTime(2024, 5, 1, 20, 25, 31, 175, DateTimeKind.Utc).AddTicks(2703),
                            Email = "ezealeguzman@example.com",
                            FullName = "Ezequiel Guzman",
                            Password = "$2a$11$DIauooOGsf7vKAVrolsKR.z/gI8RqWF7kUvredYDaL6RmmRDlNSaS",
                            Status = "Unverified",
                            UserName = "ezealeguzman"
                        },
                        new
                        {
                            Id = -4,
                            DateAdded = new DateTime(2024, 5, 1, 20, 25, 31, 301, DateTimeKind.Utc).AddTicks(6609),
                            DateUpdated = new DateTime(2024, 5, 1, 20, 25, 31, 301, DateTimeKind.Utc).AddTicks(6613),
                            Email = "facu597@example.com",
                            FullName = "Facundo Castro",
                            Password = "$2a$11$Mm1cuR86P/gMJfgon84GEOeP9/JA5CzBSjLu4mXHZyY9zd0STMnK2",
                            Status = "Unverified",
                            UserName = "facu597"
                        },
                        new
                        {
                            Id = -5,
                            DateAdded = new DateTime(2024, 5, 1, 20, 25, 31, 432, DateTimeKind.Utc).AddTicks(5799),
                            DateUpdated = new DateTime(2024, 5, 1, 20, 25, 31, 432, DateTimeKind.Utc).AddTicks(5803),
                            Email = "karla6524@example.com",
                            FullName = "Karla Chavez",
                            Password = "$2a$11$.0Kc5qA/xb5pvKBu1RFXa.w/LjKuszyBMpPvjKGiX5udtT2FhtZ8K",
                            Status = "Unverified",
                            UserName = "karla6524"
                        },
                        new
                        {
                            Id = -6,
                            DateAdded = new DateTime(2024, 5, 1, 20, 25, 31, 558, DateTimeKind.Utc).AddTicks(5640),
                            DateUpdated = new DateTime(2024, 5, 1, 20, 25, 31, 558, DateTimeKind.Utc).AddTicks(5644),
                            Email = "mabel8750_@example.com",
                            FullName = "Mabel Ceballos",
                            Password = "$2a$11$4Dkesh9F3O/egy9V8G3cCuA.CzOc5Mggzl0hDGAE1Ca6icLypnwg2",
                            Status = "Unverified",
                            UserName = "mabel8750_"
                        });
                });

            modelBuilder.Entity("Lumina_Backend.Models.Account", b =>
                {
                    b.HasOne("Lumina_Backend.Models.User", "User")
                        .WithMany("Accounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lumina_Backend.Models.Log", b =>
                {
                    b.HasOne("Lumina_Backend.Models.User", "User")
                        .WithMany("Logs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lumina_Backend.Models.Security", b =>
                {
                    b.HasOne("Lumina_Backend.Models.User", "User")
                        .WithMany("Securities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lumina_Backend.Models.Transaction", b =>
                {
                    b.HasOne("Lumina_Backend.Models.Account", "Account")
                        .WithMany("Transactions")
                        .HasForeignKey("AccountNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Lumina_Backend.Models.Account", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Lumina_Backend.Models.User", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Logs");

                    b.Navigation("Securities");
                });
#pragma warning restore 612, 618
        }
    }
}
