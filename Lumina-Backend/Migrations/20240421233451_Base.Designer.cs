// <auto-generated />
using System;
using Lumina_Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Lumina_Backend.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    [Migration("20240421233451_Base")]
    partial class Base
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Lumina_Backend.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountNumber")
                        .HasColumnType("integer");

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(24)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(24)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Accounts", (string)null);
                });

            modelBuilder.Entity("Lumina_Backend.Models.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("varchar(24)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(24)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Logs", (string)null);
                });

            modelBuilder.Entity("Lumina_Backend.Models.Security", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SecurityAnswer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SecurityQuestion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(24)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Securities", (string)null);
                });

            modelBuilder.Entity("Lumina_Backend.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountNumber")
                        .HasColumnType("integer");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(24)");

                    b.Property<string>("TransactionDescription")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(24)");

                    b.HasKey("Id");

                    b.HasIndex("AccountNumber");

                    b.ToTable("Transactions", (string)null);
                });

            modelBuilder.Entity("Lumina_Backend.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("DNI")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("Date");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("ProfileImage")
                        .HasColumnType("text");

                    b.Property<string>("SessionToken")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(24)");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = -1,
                            DateAdded = new DateTime(2024, 4, 21, 23, 34, 49, 570, DateTimeKind.Utc).AddTicks(2559),
                            DateUpdated = new DateTime(2024, 4, 21, 23, 34, 49, 570, DateTimeKind.Utc).AddTicks(2561),
                            Email = "ajruiz2204@example.com",
                            FullName = "Alejandro Ruíz",
                            Password = "$2a$11$Y0fp3sgSejmaNgif/bLBU.4O5MsShaNE7wVjcyHMNJiplYubBOdCW",
                            Status = "Unverified",
                            UserName = "ajruiz2204"
                        },
                        new
                        {
                            Id = -2,
                            DateAdded = new DateTime(2024, 4, 21, 23, 34, 49, 685, DateTimeKind.Utc).AddTicks(4831),
                            DateUpdated = new DateTime(2024, 4, 21, 23, 34, 49, 685, DateTimeKind.Utc).AddTicks(4835),
                            Email = "alexanderfrt@example.com",
                            FullName = "Alexander Flores",
                            Password = "$2a$11$/Q46ZB8iGyOjl8HeTkXkf.k.Eta4T1GQWyBR.brDPOKnLxonOeyxC",
                            Status = "Unverified",
                            UserName = "AlexanderFRT"
                        },
                        new
                        {
                            Id = -3,
                            DateAdded = new DateTime(2024, 4, 21, 23, 34, 49, 805, DateTimeKind.Utc).AddTicks(3030),
                            DateUpdated = new DateTime(2024, 4, 21, 23, 34, 49, 805, DateTimeKind.Utc).AddTicks(3034),
                            Email = "4rnol@example.com",
                            FullName = "Arnol Flores",
                            Password = "$2a$11$/uJ073oAhWMsT0sZYg0ps.2NfK.NOIFY7kKvkFWTQaDsc1U2ZQYaC",
                            Status = "Unverified",
                            UserName = "4rnol"
                        },
                        new
                        {
                            Id = -4,
                            DateAdded = new DateTime(2024, 4, 21, 23, 34, 49, 924, DateTimeKind.Utc).AddTicks(8399),
                            DateUpdated = new DateTime(2024, 4, 21, 23, 34, 49, 924, DateTimeKind.Utc).AddTicks(8403),
                            Email = "ema_ramirez@example.com",
                            FullName = "Emanuel Ramirez",
                            Password = "$2a$11$bNRM4R0dPdKL7YywTBHz7.nHfAO5E4wbge4BLEfZU99EeJ3Cgm8rO",
                            Status = "Unverified",
                            UserName = "ema_ramirez"
                        },
                        new
                        {
                            Id = -5,
                            DateAdded = new DateTime(2024, 4, 21, 23, 34, 50, 42, DateTimeKind.Utc).AddTicks(2956),
                            DateUpdated = new DateTime(2024, 4, 21, 23, 34, 50, 42, DateTimeKind.Utc).AddTicks(2959),
                            Email = "ezealeguzman@example.com",
                            FullName = "Ezequiel Guzman",
                            Password = "$2a$11$tCj8dO9fuiEnvi43eYSRY.c7OPuL5qlqndJqrIMPsPeosZtaPenEa",
                            Status = "Unverified",
                            UserName = "ezealeguzman"
                        },
                        new
                        {
                            Id = -6,
                            DateAdded = new DateTime(2024, 4, 21, 23, 34, 50, 167, DateTimeKind.Utc).AddTicks(6635),
                            DateUpdated = new DateTime(2024, 4, 21, 23, 34, 50, 167, DateTimeKind.Utc).AddTicks(6640),
                            Email = "facu597@example.com",
                            FullName = "Facundo Castro",
                            Password = "$2a$11$ZVJbHHGVIYx1Ohwl.M0U3eeC/6kqfjRCv7WjD4OrfKJy2IcDgDHcq",
                            Status = "Unverified",
                            UserName = "facu597"
                        },
                        new
                        {
                            Id = -7,
                            DateAdded = new DateTime(2024, 4, 21, 23, 34, 50, 287, DateTimeKind.Utc).AddTicks(2087),
                            DateUpdated = new DateTime(2024, 4, 21, 23, 34, 50, 287, DateTimeKind.Utc).AddTicks(2091),
                            Email = "giolucc@example.com",
                            FullName = "Giovanni Lucchetta",
                            Password = "$2a$11$fC13mUsQqRvi2Plth1QpqeZhMkfkJrfBWJwuCp8L.L/v4bJJuERMO",
                            Status = "Unverified",
                            UserName = "giolucc"
                        },
                        new
                        {
                            Id = -8,
                            DateAdded = new DateTime(2024, 4, 21, 23, 34, 50, 404, DateTimeKind.Utc).AddTicks(9572),
                            DateUpdated = new DateTime(2024, 4, 21, 23, 34, 50, 404, DateTimeKind.Utc).AddTicks(9576),
                            Email = "karla6524@example.com",
                            FullName = "Karla Chavez",
                            Password = "$2a$11$xHXAwH9jIz3utBTCf4be4ObHsnR1hRCRQnREhkVwFqPS8IOWG6UiS",
                            Status = "Unverified",
                            UserName = "karla6524"
                        },
                        new
                        {
                            Id = -9,
                            DateAdded = new DateTime(2024, 4, 21, 23, 34, 50, 521, DateTimeKind.Utc).AddTicks(196),
                            DateUpdated = new DateTime(2024, 4, 21, 23, 34, 50, 521, DateTimeKind.Utc).AddTicks(199),
                            Email = "mabel8750_@example.com",
                            FullName = "Mabel Ceballos",
                            Password = "$2a$11$tPVtFLamiFjGDIMSR9dvBedVUbuElSw0oKAY.5E4CkHUiHIAIBXhO",
                            Status = "Unverified",
                            UserName = "mabel8750_"
                        });
                });

            modelBuilder.Entity("Lumina_Backend.Models.Account", b =>
                {
                    b.HasOne("Lumina_Backend.Models.User", "User")
                        .WithMany("Accounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lumina_Backend.Models.Log", b =>
                {
                    b.HasOne("Lumina_Backend.Models.User", "User")
                        .WithMany("Logs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lumina_Backend.Models.Security", b =>
                {
                    b.HasOne("Lumina_Backend.Models.User", "User")
                        .WithMany("Securities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lumina_Backend.Models.Transaction", b =>
                {
                    b.HasOne("Lumina_Backend.Models.Account", "Account")
                        .WithMany("Transactions")
                        .HasForeignKey("AccountNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Lumina_Backend.Models.Account", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Lumina_Backend.Models.User", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Logs");

                    b.Navigation("Securities");
                });
#pragma warning restore 612, 618
        }
    }
}
